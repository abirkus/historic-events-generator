version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chronicle-explorer-backend
    ports:
      - "8000:8000"
    environment:
      # AI Provider API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      
      # App Configuration
      - DEFAULT_AI_PROVIDER=${DEFAULT_AI_PROVIDER:-openai}
      - ENV=${ENV:-development}
      - DEBUG=${DEBUG:-true}
      
      # FastAPI Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - RELOAD=${RELOAD:-true}
    volumes:
      # Mount source code for development (remove in production)
      - ./backend:/app
      # Exclude node_modules and __pycache__
      - /app/__pycache__
      - /app/.pytest_cache
    networks:
      - chronicle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_SERVER_API_BASE_URL=http://localhost:8000
    container_name: chronicle-explorer-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      # Mount source code for development (remove in production)
      - ./frontend:/app
      - /app/node_modules
      - /app/dist
    networks:
      - chronicle-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  chronicle-network:
    driver: bridge
    name: chronicle-network

# Optional: Add volumes for data persistence
volumes:
  backend_data:
    name: chronicle-backend-data
  frontend_data:
    name: chronicle-frontend-data